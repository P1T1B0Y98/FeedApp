<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="T:API.Controllers.PollController">
            <summary>
            Poll API endpoint
            </summary>
        </member>
        <member name="M:API.Controllers.PollController.getAllPolls">
            <summary>
            Get all polls.
            </summary>
            <returns>List of polls, each with fields {Id, Question, IsPrivate, IsClosed, EndTime, CreatorId, CreatorName, CountVotes}</returns>
            <response code="200">Polls</response>
        </member>
        <member name="M:API.Controllers.PollController.getPoll(System.Guid)">
            <summary>
            Get a poll by its ID.
            </summary>
            <param name="Id">pollID to get</param>
            <returns>Poll info with fields {Id, Question, IsPrivate, IsClosed, EndTime, CreatorId, CreatorName, CountVotes}</returns>
            <response code="200">Poll</response>
        </member>
        <member name="M:API.Controllers.PollController.createPoll(Application.DTO.PollDTOs.CreatePollDTO)">
            <summary>
            Create a new poll.
            </summary>
            <param name="createPollDTO">Json object with poll info, must contain fields {Question: _, IsPrivate: _, EndTime: _}</param>
            <returns>Status code 201</returns>
            <response code="201">Poll created</response>
        </member>
        <member name="M:API.Controllers.PollController.updatePoll(System.Guid,Application.DTO.PollDTOs.UpdatePollDTO)">
            <summary>
            Update a poll.
            </summary>
            <param name="Id">pollID of poll to update</param>
            <param name="updatePollDTO">Json object with updated poll info, should contain at least one of {Question: _, IsPrivate: _, EndTime: _}</param>
            <returns>Poll {id} updated</returns>
            <response code="200">Poll {id} updated</response>
            <response code="403">Forbidden</response>
        </member>
        <member name="M:API.Controllers.PollController.closePoll(System.Guid)">
            <summary>
            Close a poll manually.
            </summary>
            <param name="Id">pollID of poll to be closed.</param>
            <returns>Poll {id} closed.</returns>
            <response code="200">Poll {id} closed.</response>
            <response code="403">Forbidden</response>
        </member>
        <member name="M:API.Controllers.PollController.deletePoll(System.Guid)">
            <summary>
            Delete a poll.
            </summary>
            <param name="Id">pollID of poll to be deleted</param>
            <returns>Poll {id} deleted</returns>
            <response code="200">Poll {id} deleted</response>
            <response code="403">Forbidden</response>
        </member>
        <member name="T:API.Controllers.UserController">
            <summary>
            User API endpoint
            </summary>
        </member>
        <member name="M:API.Controllers.UserController.GetUserById(System.String)">
            <summary>
            Get a user from their ID
            </summary>
            <param name="id">UserID</param>
            <returns>User info</returns>
            <response code="200">{Id, UserName}</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="M:API.Controllers.UserController.GetAllUsers">
            <summary>
            Get all users
            </summary>
            <returns>User info</returns>
            <response code="200">[{Id, UserName}]</response>
        </member>
        <member name="M:API.Controllers.UserController.createUser(Application.DTO.UserDTOs.CreateUserDTO)">
            <summary>
            Create a new user
            </summary>
            <param name="createUserDTO">User info as json object containing {Firstname: _, Lastname: _, Email: _, Username: _, Password: _}</param>
            <returns>Jwt Token so the user gets logged in to the new user</returns>
            <response code="200">Jwt Token</response>
        </member>
        <member name="M:API.Controllers.UserController.authUser(Application.DTO.UserDTOs.LoginUserDTO)">
            <summary>
            Login to a user.
            </summary>
            <param name="loginUserDTO">User info as a json object containing {UserName: _, Password: _}</param>
            <returns>Jwt Token used to authorize user</returns>
            <response code="200">Jwt Token</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="M:API.Controllers.UserController.UpdateUserById(Application.DTO.UserDTOs.UpdateUserDTO)">
            <summary>
            Update user info
            </summary>
            <param name="updateUserDTO">Json object with update info, valid fields are any of {Firstname, Lastname, Email, UserName, Password}</param>
            <returns>Statuscode 201</returns>
            <response code="201">User successfully updated</response>
            <response code="400">Bad Request</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="T:API.Controllers.VoteController">
            <summary>
            Vote API endpoint
            </summary>
        </member>
        <member name="M:API.Controllers.VoteController.GetVoteById(System.Guid)">
            <summary>
            Get a vote by its ID.
            </summary>
            <param name="Id">VoteID</param>
            <returns>Vote info, json object with fields {Id, IsPositive, VotedPollId, VotedPollQuestion}</returns>
            <response code="200">Vote</response>
        </member>
        <member name="M:API.Controllers.VoteController.GetVotesByPollId(System.Guid)">
            <summary>
            Get all votes on a given poll.
            </summary>
            <param name="pollId">PollID</param>
            <returns>List of votes, each with fields {Id, IsPositive, VotedPollId, VotedPollQuestion}</returns>
            <response code="200">Votes</response>
        </member>
        <member name="M:API.Controllers.VoteController.GetUserVotes">
            <summary>
            Get all votes for the currently logged in user.
            </summary>
            <returns>List of votes, each with fields {Id, IsPositive, VotedPollId, VotedPollQuestion}</returns>
            <response code="200">Votes</response>
        </member>
        <member name="M:API.Controllers.VoteController.CreateVote(System.Guid,Application.DTO.VoteDTOs.CreateVoteDTO)">
            <summary>
            Create a new vote
            </summary>
            <param name="pollId">pollID of poll to vote on</param>
            <param name="createVoteDTO">Vote information, json object with content {IsPositive: _}</param>
            <returns>Status code 201</returns>
            <response code="201">Vote Registered</response>
            <response code="403">Forbidden</response>
        </member>
        <member name="M:API.Controllers.VoteController.UpdateVote(System.Guid,Application.DTO.VoteDTOs.CreateVoteDTO)">
            <summary>
            Update a vote.
            </summary>
            <param name="Id">voteID of vote to be updated</param>
            <param name="updateVoteDTO">Update info as json object with field {IsPositive: _}</param>
            <returns>Vote updated</returns>
            <response code="200">Vote updated</response>
            <response code="403">Forbidden</response>
        </member>
        <member name="M:API.Controllers.VoteController.DeleteVote(System.Guid)">
            <summary>
            Delete a vote.
            </summary>
            <param name="Id">voteID to be deleted</param>
            <returns>Vote deleted</returns>
            <response code="200">Vote deleted</response>
            <response code="403">Forbidden</response>
        </member>
        <member name="M:FeedApp.Extensions.SwaggerExtensions.AddSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds swagger to an IServiceCollection
            </summary>
        </member>
    </members>
</doc>
