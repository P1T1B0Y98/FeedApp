parameters:
- name: buildPlatform
  type: string
  default: 'x64'

- name: buildConfiguration
  type: string
  default: 'Release'

- name: solutionPath
  type: string

- name: artifactName
  type: string
  default: 'backend-package'

- name: clientAppPath
  type: string
  default: ''

jobs:
- job: 'Build'
  displayName: 'Build'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    fetchDepth: 100
    lfs: false

  # FrontEnd
  - task: Npm@1
    displayName: 'Npm Install'
    condition: ne('${{ parameters.clientAppPath }}', '')
    inputs:
      workingDir: '${{ parameters.clientAppPath }}'
      verbose: false

  - task: Npm@1
    displayName: 'npm run build'
    condition: ne('${{ parameters.clientAppPath }}', '')
    inputs:
      command: 'custom'
      workingDir: '${{ parameters.clientAppPath }}'
      customCommand: 'run-script build-prod'

  # Backend
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
        command: restore
        projects: '${{ parameters.solutionPath }}*.sln'
        noCache: true
  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
        command: 'build'
        projects: '${{ parameters.solutionPath }}*.sln'
        arguments: '--configuration ${{ parameters.buildConfiguration }}'
  - task: DotNetCoreCLI@2
    displayName: 'Unit tests'
    inputs:
        command: 'test'
        projects: '${{ parameters.solutionPath }}**/*.Tests.Unit.csproj'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --collect "Code Coverage"'
        verbosityRestore: Minimal
  - task: DotNetCoreCLI@2
    displayName: 'Integration tests'
    inputs:
        command: 'test'
        projects: '${{ parameters.solutionPath }}**/*.Tests.Integration.csproj'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --collect "Code Coverage"'
        verbosityRestore: Minimal
  - task: DotNetCoreCLI@2
    displayName: 'Package'
    inputs:
        command: publish
        publishWebProjects: false
        projects: ${{ parameters.solutionPath }}*.sln
        arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory) --no-restore'
        zipAfterPublish: True
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
        ArtifactName: '${{ parameters.artifactName }}'
        
  - task: DotNetCoreCLI@2
      displayName: 'Publish project'
      inputs:
        command: publish
        publishWebProjects: False
        projects: ${{parameters.projectpath}}
        arguments: '--configuration $(buildConfiguration)'
        zipAfterPublish: true

  - task: AzureWebApp@1
      displayName: "Publish project to app service"
      inputs:
        azureSubscription: "Azure for Students(${{secrets.SUBSCRIPTION_ID}})"
        appType: "webApp"
        appName: "${{parameters.websiteName}}"
        package: '**/*.zip'
        deploymentMethod: "auto"
